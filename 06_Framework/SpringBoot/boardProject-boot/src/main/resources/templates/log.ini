Log : 항해 일지, 기록을 남기는 것

Log를 남기는 이유
- 애플리케이션의 효율적인 관리가 가능해진다
  (유지보수성 향상, 성능 개선, 버그 수정)

- System.out.println() 구문 사용 X
  (print 구문은 속도가 매우 느림!)

- 파일로 남겨서 기록을 지속할 수 있다


----------------------------------------------------

[ log4j ]
- Java 기반 Logging Framework
- 콘솔, 파일에 로그를 쉽게 출력할 수 있게 지원
- Apache에서 만듦
- 2015년 이후로 개발 중지 (보안 업데이트만 진행)

[logback]
- log4j의 대안으로 나온 새로운 Loggin Framework
- Spring boot Web에 기본 내장

[Slf4j]
- Simple Loggin Faced For Java (자바에서 로그 간단히 찍기)
- log4j, logback의 추상체(인터페이스)
- log4j <-> logback 교환이 쉬워짐


@Slf4j : 해당 클래스에서 로그를 사용하겠다는 어노테이션
  -> log.xxx() 호출 가능

xxx 에 들어갈 에러 레벨 ( 숫자가 낮을수록 레벨이 낮음)

1. trace : (추적하다) 기능, 이벤트가 발생된 상황을
          상세하게 추적해서 기록함

2. debug : 원하는 순간의 데이터 확인 시 사용

3. info : 정보성 메시지 출력

4. warn : (warnning : 경고)
        실행됨에 있어서 문제는 없지만 
        에러의 원인이 될 수 있음

5. error : 수행 중 오류로 인해 정상 동작 X 또는
        프로그램 종료 상황
  
6. FATAL : (치명적인, 심각한)
        아주 심각한 에러  (코드로 해결 불가능한 에러)
        - FATAL 레벨은 로그 레벨 지정 불가능









log.debug("내용")
log.info("내용 ")